// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          Int       @id @default(autoincrement())
  user        User[]
  rating      Int       @default(0)
  phone       String
  name        String
  address     String    @unique()
  capacity    Int
  licenseType String    @unique
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  createdBy   String?   @map("created_by")
  updatedBy   String?   @map("updated_by")
  deletedAt   DateTime? @map("deleted_at")
  deletedBy   String?   @map("deleted_by")
  version     Int       @default(0)
  ownerId     Int?      @map("owner_id")
  clients     Client[]
}

model User {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  password     String
  phone        String?      @unique
  firstName    String?
  lastName     String?
  isActive     Boolean?     @default(false) @map("is_active")
  photo        String?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  createdBy    String?      @map("created_by")
  updatedBy    String?      @map("updated_by")
  deletedAt    DateTime?    @map("deleted_at")
  deletedBy    String?      @map("deleted_by")
  version      Int          @default(0)
  ownerId      Int?         @map("owner_id")
  restaurantId Int?         @map("restaurant_id")
  role         Role?        @relation(fields: [roleId], references: [id])
  roleId       Int?         @map("role_id")
  restaurants  Restaurant[]
}

model Role {
  id           Int          @id @default(autoincrement())
  name         String       @unique()
  description  String
  permissions  Permission[]
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  createdBy    String?      @map("created_by")
  updatedBy    String?      @map("updated_by")
  deletedAt    DateTime?    @map("deleted_at")
  deletedBy    String?      @map("deleted_by")
  ownerId      Int?         @map("owner_id")
  version      Int          @default(0)
  restaurantId Int?         @map("restaurant_id")
  users        User[]
}

model Permission {
  id          Int       @id @default(autoincrement())
  path        String
  method      String
  description String
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  createdBy   String?   @map("created_by")
  updatedBy   String?   @map("updated_by")
  deletedAt   DateTime? @map("deleted_at")
  deletedBy   String?   @map("deleted_by")
  version     Int       @default(0)
  roles       Role[]

  @@unique([path, method])
}

model Client {
  id           Int           @id @default(autoincrement())
  name         String
  age          Int
  email        String        @unique
  restaurant   Restaurant?   @relation(fields: [restaurantId], references: [id])
  restaurantId Int?          @map("restaurant_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  createdBy    String?       @map("created_by")
  updatedBy    String?       @map("updated_by")
  deletedAt    DateTime?     @map("deleted_at")
  deletedBy    String?       @map("deleted_by")
  version      Int           @default(0)
  ownerId      Int           @map("owner_id")
  reservations Reservation[]
  table        Table[]
}

model Reservation {
  id           Int                   @id @default(autoincrement())
  clientId     Int
  client       Client                @relation(fields: [clientId], references: [id])
  status       ReservationStatusEnum
  date         DateTime
  time         String
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @updatedAt @map("updated_at")
  createdBy    String?               @map("created_by")
  updatedBy    String?               @map("updated_by")
  deletedAt    DateTime?             @map("deleted_at")
  deletedBy    String?               @map("deleted_by")
  version      Int                   @default(0)
  ownerId      Int?                  @map("owner_id")
  restaurantId Int?                  @map("restaurant_id")
}

model Table {
  id           Int             @id @default(autoincrement())
  number       Int
  status       TableStatusEnum
  totalPrice   Float?          @map("total_price")
  clientId     Int             @map("client_id")
  client       Client          @relation(fields: [clientId], references: [id])
  orders       Order[]
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  createdBy    String?         @map("created_by")
  updatedBy    String?         @map("updated_by")
  deletedAt    DateTime?       @map("deleted_at")
  deletedBy    String?         @map("deleted_by")
  version      Int             @default(0)
  ownerId      Int?            @map("owner_id")
  restaurantId Int?            @map("restaurant_id")
}

model Order {
  id           Int             @id @default(autoincrement())
  totalPrice   Float?          @map("total_price")
  date         DateTime
  status       OrdenStatusEnum
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  createdBy    String?         @map("created_by")
  updatedBy    String?         @map("updated_by")
  deletedAt    DateTime?       @map("deleted_at")
  deletedBy    String?         @map("deleted_by")
  version      Int             @default(0)
  ownerId      Int?            @map("owner_id")
  restaurantId Int?            @map("restaurant_id")
  tableId      Int             @map("table_id")
  table        Table           @relation(fields: [tableId], references: [id])
  items        OrderItem[]
}

model OrderItem {
  id           Int       @id @default(autoincrement())
  quantity     Int
  price        Float
  orderId      Int
  order        Order     @relation(fields: [orderId], references: [id])
  date         DateTime
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  createdBy    String?   @map("created_by")
  updatedBy    String?   @map("updated_by")
  deletedAt    DateTime? @map("deleted_at")
  deletedBy    String?   @map("deleted_by")
  version      Int       @default(0)
  ownerId      Int?      @map("owner_id")
  restaurantId Int?      @map("restaurant_id")

  @@map("order_items")
}

enum ReservationStatusEnum {
  PENDING
  NOT_CONFIRMED
  CANCELLED
  CONFIRMED
}

enum OrdenStatusEnum {
  OPEN
  CLOSE
  COMPLIMENTARY_BILLL
  HOUSE_ACCOUNT
}

enum TableStatusEnum {
  OPEN
  CLOSE
  COMPLIMENTARY_BILLL
  HOUSE_ACCOUNT
}
